plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'

	//gradle提供的mybatis generator插件
	id "com.arenagod.gradle.MybatisGenerator" version "1.4"
}

group = 'com.demo'
version = '1.0.0'
sourceCompatibility = '1.8'


repositories {
	/**先从本地仓库查找jar包*/
	mavenLocal()

	/**再从aliyun镜像下载依赖jar包*/
	maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }

	/**再从maven中央仓库下载依赖jar包*/
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	/**用于跟踪分析spring boot项目jar包启动的原理*/
	implementation  'org.springframework.boot:spring-boot-loader'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	/**lombok*/
	compileOnly 'org.projectlombok:lombok:1.18.10'
	annotationProcessor 'org.projectlombok:lombok:1.18.10'
	testCompileOnly 'org.projectlombok:lombok:1.18.10'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.10'

	/**jsp相关依赖*/
	implementation 'javax.servlet:jstl'
	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	/**mysql*/
	compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.48'
	/**druid*/
	compile group: 'com.alibaba', name: 'druid-spring-boot-starter', version: '1.1.21'
	/**mybatis*/
	compile 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.2'
	/**mybatis-generator core 包*/
	compile group: 'org.mybatis.generator', name: 'mybatis-generator-core', version:'1.4.0'

	/**kafka*/
	compile 'org.springframework.kafka:spring-kafka:2.3.4.RELEASE'

	/**proto-buffer*/
	compile 'io.protostuff:protostuff-core:1.6.0'
	compile 'io.protostuff:protostuff-runtime:1.6.0'
}



configurations {
	mybatisGenerator
}

// mybatis-generator.xml 配置路径
mybatisGenerator {
	verbose = true
	configFile = 'src/main/resources/mybatis/mybatis-generator.xml'
}


test {
	useJUnitPlatform()
}


tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}